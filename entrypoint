#!/bin/bash -x

interactive=$(if test -t 0; then echo true; else echo false; fi)
set -euo pipefail
IFS=$'\n\t'

# Configure Java unlimited strength cryptography
if [ "${CRYPTO_POLICY}" = "unlimited" ]; then
  echo "Configuring Java unlimited strength cryptography policy..."
  sed -i 's/^crypto.policy=limited/crypto.policy=unlimited/' "${JAVA_HOME}/conf/security/java.security"
fi

# Deleting instance.properties ensures that the properties are regenerated on first boot after an image update
rm -f "${OPENHAB_USERDATA}/etc/org.openhab.instance.location.properties"

# Add openhab user & handle possible device groups for different host systems
# Container base image puts dialout on group id 20, uucp on id 10
# GPIO Group for RPI access
NEW_USER_ID=${USER_ID:-9001}
NEW_GROUP_ID=${GROUP_ID:-$NEW_USER_ID}
echo "Starting with openhab user id: $NEW_USER_ID and group id: $NEW_GROUP_ID"
if ! id -u openhab >/dev/null 2>&1; then
  if [ -z "$(getent group $NEW_GROUP_ID)" ]; then
    echo "Create group openhab with id ${NEW_GROUP_ID}"
    groupadd -g $NEW_GROUP_ID openhab
  else
    group_name=$(getent group $NEW_GROUP_ID | cut -d: -f1)
    echo "Group id ${NEW_GROUP_ID} already exists with name ${group_name}"
  fi
  echo "Create user openhab with id ${NEW_USER_ID}"
  adduser -u $NEW_USER_ID --disabled-password --gecos '' --home "${OPENHAB_HOME}" --gid $NEW_GROUP_ID openhab
  groupadd -g 14 uucp2
  groupadd -g 16 dialout2
  groupadd -g 18 dialout3
  groupadd -g 32 uucp3
  groupadd -g 997 gpio
  adduser openhab gpio
  adduser openhab dialout
  adduser openhab uucp
  adduser openhab dialout2
  adduser openhab uucp2
  adduser openhab dialout3
  adduser openhab uucp3
fi

initialize_volume() {
  volume="$1"
  source="$2"

  if [ -z "$(ls -A "$volume")" ]; then
    echo "Initializing empty volume ${volume} ..."
    cp -av "${source}/." "${volume}/"
  fi
}

# Initialize empty volumes and update userdata
initialize_volume "${OPENHAB_CONF}" "${OPENHAB_HOME}/dist/conf"
initialize_volume "${OPENHAB_USERDATA}" "${OPENHAB_HOME}/dist/userdata"

# Update userdata if newer files are available
if [ ! -f "${OPENHAB_USERDATA}/etc/version.properties" ] || [ "$("${OPENHAB_HOME}/runtime/bin/version" | sed 's/.* \([0-9.]*\)$/\1/')" != "$(awk '/openhab-distro/{print $3}' "${OPENHAB_USERDATA}/etc/version.properties")" ]; then
  echo "Image and userdata versions differ! Starting an upgrade of userdata..." 
  OPENHAB_USERDATA_INITIALIZE="true"
fi

# Initialize userdata if necessary
if [ "${OPENHAB_USERDATA_INITIALIZE:-false}" == "true" ]; then
  echo "Initialize userdata..."
  
  # Create a temporary directory for staging
  TEMP_DIR=$(mktemp -d)
  cp -av "${OPENHAB_HOME}/dist/userdata/." "$TEMP_DIR/"

  # Copy existing files that we want to preserve
  if [ -f "${OPENHAB_USERDATA}/etc/uuid" ]; then
    mkdir -p "$TEMP_DIR/etc"
    cp -f "${OPENHAB_USERDATA}/etc/uuid" "$TEMP_DIR/etc/"
  fi

  # Remove existing files and copy new ones
  rm -rf "${OPENHAB_USERDATA}/etc"
  mkdir -p "${OPENHAB_USERDATA}/etc"
  cp -av "$TEMP_DIR/etc/." "${OPENHAB_USERDATA}/etc/"

  # Clean up
  rm -rf "$TEMP_DIR"
fi

# Set openhab folder permission
chown -R openhab:openhab "${OPENHAB_HOME}"
sync

# Run s6-style init continuation scripts if existing
if [ -d /etc/cont-init.d ]
then
    for script in $(find /etc/cont-init.d -type f -executable | sort)
    do
        echo "-> Executing container initialization script ${script}..."
        ${script}
    done
fi

# sync again after continuation scripts have been run
sync

# Use exec to run the command as PID 1
exec "$@"
